geom_point()+ scale_x_continuous()
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_discrete()
?scale_x_continuous
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(breaks = c(0,203,12))
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(limits= c(0,200), breaks = c(0,200,12))
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(limits= c(0,203), breaks = c(0,200,12))
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(limits= c(0,203), breaks = c(0,200,12,24,36,48,60,72,84,96))
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(limits= c(0,203), breaks = c(0,200,12,24,36,48,60,72,84,96,108,120,132,144,156,168,180,192,204))
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(breaks = c(0,200,12,24,36,48,60,72,84,96,108,120,132,144,156,168,180,192,204))
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(breaks = seq(0,203,12))
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_discrete(breaks = seq(0,203,12))
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(breaks = seq(0,203,12))
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(breaks = seq(0,203,12))
ggplot(aes(x = (Month%%12), y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(breaks = seq(0,203,12))
ggplot(aes(x = (Month%%12), y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(breaks = seq(0,203,12))
ggplot(aes(x = (Month%%12), y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(breaks = seq(0,203,12))
ggplot(aes(x = (Month%%12), y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(breaks = seq(0,203,12))
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(breaks = seq(0,203,12))
ggplot(aes(x = Month, y= Temp ), data= Mitchell)+
geom_point()+ scale_x_continuous(breaks = seq(0,203,12))
q()
setwd("~/Eweed/R")
library(ggplot2)
data("diamonds")
ggplot(aes(x = carat , y = price ), data = diamonds)+
geom_point()+
xlim(0, quantile(diamonds$carat, 0.9))+
ylim(0, quantile(diamonds$price, 0.9))
ggplot(aes(x = carat , y = price ), data = diamonds)+
geom_point()+
xlim(0, quantile(diamonds$carat, 0.9))+
ylim(0, quantile(diamonds$price, 0.9))
ggplot(aes(x = carat , y = price ), data = diamonds)+
geom_point()+
xlim(0, quantile(diamonds$carat, 0.9))+
ylim(0, quantile(diamonds$price, 0.9))+
stat_smooth(method = "lm")
ggplot(aes(x = carat , y = price ), data = diamonds)+
geom_point()+
xlim(0, quantile(diamonds$carat, 0.9))+
ylim(0, quantile(diamonds$price, 0.9))+
stat_smooth(method = "lm")
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
install.packages("plyr")
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower= list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower= list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
library(gridExtra)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram()
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram()+
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram()
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram()+
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram(binwidth = 30)
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram(binwidth = 30)+
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram(binwidth = 30)
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram()+
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram(binwidth = 30)
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram()+
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram(binwidth = 100)
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram(binwidth = 0.01)+
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram(binwidth = 100)
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram(binwidth = 0.01)+
scale_x_log10()
grid.arrange(p1, p2)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram(binwidth = 100)
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram(binwidth = 0.01)+
scale_x_log10()
grid.arrange(p1, p2, ncol = 2)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram(aes(color = "blue"), binwidth = 100)
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram(aes(color = "orange"), binwidth = 0.01)+
scale_x_log10()
grid.arrange(p1, p2, ncol = 2)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram(aes(color = "blue"), binwidth = 100)
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram(aes(color = "orange"), binwidth = 0.01)+
scale_x_log10()
grid.arrange(p1, p2, ncol = 2)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram(aes(color = blue), binwidth = 100)
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram(aes(color = orange), binwidth = 0.01)+
scale_x_log10()
grid.arrange(p1, p2, ncol = 2)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram(aes(color = 'blue'), binwidth = 100)
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram(aes(color = 'orange'), binwidth = 0.01)+
scale_x_log10()
grid.arrange(p1, p2, ncol = 2)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha = 1/2, size = 3/4) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha = 1/2, size = 3/4) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
install.packages('RColorBrewer')
install.packages("RColorBrewer")
names(diamonds)
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter',
aes(color = clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter',
aes(color = clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(ggplot2)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter',
aes(color = clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# loading data
library(ggplot2)
data("diamonds")
# scatter plot price Vs. carat
ggplot(aes(x = carat , y = price ), data = diamonds)+
geom_point()+
xlim(0, quantile(diamonds$carat, 0.9))+
ylim(0, quantile(diamonds$price, 0.9))+
stat_smooth(method = "lm")
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Cut, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
# loading data
library(ggplot2)
data("diamonds")
# scatter plot price Vs. carat
ggplot(aes(x = carat , y = price ), data = diamonds)+
geom_point()+
xlim(0, quantile(diamonds$carat, 0.9))+
ylim(0, quantile(diamonds$price, 0.9))+
stat_smooth(method = "lm")
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages("scales")
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower= list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
install.packages("plyr")
library(gridExtra)
p1 <- ggplot(aes(price), data =diamonds)+
geom_histogram(aes(color = 'blue'), binwidth = 100)
p2 <- ggplot(aes(price), data = diamonds)+
geom_histogram(aes(color = 'orange'), binwidth = 0.01)+
scale_x_log10()
grid.arrange(p1, p2, ncol = 2)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter',
aes(color = clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages("RColorBrewer")
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter',
aes(color = clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter',
aes(color = clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = color, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5, sdigits = 3)
install.package('bitops')
install.packages('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
install.packages("bitops")
install.packages("RCurl")
install.packages("RCurl")
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
source(rawConnection(diamondsurl))
load("/home/ahmed/Eweed/R/BigDiamonds.Rda")
names(BigDiamonds.Rda)
names(diamondsbig)
names(diamondsbig)
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
thisDiamond = data.frame(carat = 1.00, cut = "Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
thisDiamond = data.frame(carat = 1.00, cut = "Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
q()
q()
